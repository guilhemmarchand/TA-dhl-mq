# searchbnf.conf

[getmqrelay-command]
syntax = | getmqrelay
description = \
    This command is a REST API wrapper to retrieve the MQ replay KVstore collection content \
    from a third party Splunk instance using a bearer authentication token. \
    Syntax: \
    | getmqrelay
comment1 = \
    This custom command takes no options, search filtering options can be set in the Add-on
example1 = \
    | getmqrelay
shortdesc = This command is a REST API wrapper to retrieve the MQ replay KVstore collection content.
usage = public
tags = TA-dhl-mq

[putmqrelay-command]
syntax = | putmqrelay field_message_id=<message field identifier> field_message=<message field name> field_appname=<appname field name> field_manager=<manager field name> field_queue=<queue field name> field_region=<region field name> dedup=<True/False> max_batchsize=<max number of messages per batch> comment=<free text comment to be added>
description = \
    This command is a REST API wrapper to put MQ messages to be consumed by Splunk MQ HF relay instances.
    Syntax: \
    | putmqrelay field_message=<message field identifier> field_message=<message field name> field_appname=<appname field name> field_manager=<manager field name> field_queue=<queue field name> field_region=<region field name> dedup=<True/False> max_batchsize=<max number of messages per batch> comment=<free comment message>
comment1 = \
    dedup mode is optional and False by default, if True dedup will ensure to refuse adding a message in the collection that exists already (based on the message identifier and the message payload)
example1 = \
    | putmqrelay field_message_id="message_id" field_message="message" field_appname="appname" field_manager="manager" field_queue="queue" field_region="region" dedup=True max_batchsize=10000 comment="ticket ID:xxxx"
shortdesc = This command is a REST API wrapper to put MQ messages to be consumed by Splunk MQ HF relay instances.
usage = public
tags = TA-dhl-mq

[getmqbatch-command]
syntax = | getmqbatch
description = \
    This command handles singleline pending messages to be processed by batches for performance purposes
    Syntax: \
    | getmqbatch
comment1 = \
    This custom command takes no options, search filtering options can be set in the Add-on
example1 = \
    | getmqbatch
shortdesc = This command is a REST API wrapper to retrieve the MQ replay KVstore collection content.
usage = public
tags = TA-dhl-mq

[managebatch-command]
syntax = | managebatch batch_uuid=<unique identifier of the batch to be allowed> action=<submit|cancel> comment=<comment for this operation>
description = \
    This command is a REST API wrapper to validate a pending batch of MQ messages submission.
    Syntax: \
    | managebatch batch_uuid=<unique identifier of the batch to be allowed> action=<submit|cancel> comment=<comment for this operation>
comment1 = \
    This custom command requires the batch_uuid value.
example1 = \
    | managebatch batch_uuid=<unique identifier of the batch to be allowed> action=<submit|cancel> comment=<comment for this operation>
shortdesc = This command is a REST API wrapper to validate a pending batch of MQ messages submission.
usage = public
tags = TA-dhl-mq

[cleanorphans-command]
syntax = | cleanorphans
description = \
    This custom command is a maintenance routine check to clear out any remaining files in the batch and massbatch folders.
    Syntax: \
    | cleanorphans
comment1 = \
    This custom command does not require any arguments.
example1 = \
    | cleanorphans
shortdesc = This custom command is a maintenance routine check to clear out any remaining files in the batch and massbatch folders.
usage = public
tags = TA-dhl-mq

[sendkeepalive-command]
syntax = | sendkeepalive
description = \
    This custom command is designed to be run by the consumer registering to an HA group.
    Syntax: \
    | sendkeepalive
comment1 = \
    This custom command does not require any arguments.
example1 = \
    | sendkeepalive
shortdesc = This custom command is designed to be run by the consumer registering to an HA group.
usage = public
tags = TA-dhl-mq

[gethagroups-command]
syntax = | gethagroups
description = \
    This custom command retrieves the current HA groups knowledge
    Syntax: \
    | gethagroups
comment1 = \
    This custom command does not require any arguments.
example1 = \
    | gethagroups
shortdesc = This custom command retrieves the current HA groups knowledge.
usage = public
tags = TA-dhl-mq

[purgelocalcache-command]
syntax = | purgelocalcache max_age=<maximal age of the records to be kept in seconds>
description = \
    This custom command purges old records from the local cache of the consumer
    Syntax: \
    | purgelocalcache max_age=<maximal age of the records to be kept in seconds>
comment1 = \
    This custom command does not require any arguments.
example1 = \
    | purgelocalcache max_age="86400"
shortdesc = This custom command purges old records from the local cache of the consumer.
usage = public
tags = TA-dhl-mq

[flushremoterecords-command]
syntax = | flushremoterecords field_remote_splsearch=<field containing the remote search> field_local_splsearch=<field containing the local search>
description = \
    This custom command flushes remote and local Metadata KVstores for successfully proceeded records
    Syntax: \
    | flushremoterecords field_remote_splsearch=<field containing the remote search> field_local_splsearch=<field containing the local search>
comment1 = \
    This custom command requires the remote SPL search and local SPL search in arguments.
example1 = \
    | flushremoterecords field_remote_splsearch="remote_search" field_local_splsearch="local_search"
shortdesc = This custom command flushes remote and local Metadata KVstores for successfully proceeded records.
usage = public
tags = TA-dhl-mq
