# macros.conf

# defines access to the technical index
[idx_mq]
definition = index="gbs_its_pds_infra_mqsubmission"
iseval = 0

[eval_status_batch]
definition = eval status=mvjoin(status, "|")\
| eval status=case(\
match(status, "pending"), "pending",\
match(status, "temporary_failure"), "temporary_failure",\
match(status, "permanent_failure"), "permanent_failure",\
match(status, "canceled"), "canceled",\
match(status, "^success$"), "success",\
match(status, ".*"), status\
)
iseval = 0

[get_table_batches]
definition = inputlookup mq_publish_backlog | eval key=_key\
| stats values(status) as status, min(ctime) as ctime, max(mtime) as mtime, values(user) as submitter, values(appname) as appname, values(manager) as manager, values(queue) as queue, values(region) as region, max(validation_required) as validation_required, last(comment) as comment, count by batch_uuid\
| `eval_status_batch`\
| foreach ctime mtime [ eval <<FIELD>> = strftime('<<FIELD>>', "%c") ]\
| join type=outer batch_uuid [ search `idx_mq` sourcetype="mq:actions:mq_publish_message:relay" ERROR [ | inputlookup mq_publish_backlog | eval key=_key\
| stats min(ctime) as earliest | return earliest ] latest=now | rex "batch_uuid=(?<batch_uuid>\w+)"\
| stats latest(_raw) as last_error by batch_uuid ] \
| sort - limit=0 ctime
iseval = 0

[format_table_batches]
definition = eval status_batch=case(\
status="success",  "✅" . status,\
status="pending" AND validation_required=0, "⌛" . "pending_processing",\
status="pending" AND validation_required=1, "🔑" . "pending_validation",\
status="temporary_failure", "⚠️" . status,\
status="permanent_failure", "⭕" . status,\
status="canceled", "❌" . status\
)
iseval = 0

[format_time]
definition = foreach ctime, mtime [ eval <<FIELD>>=strftime('<<FIELD>>', "%c") ]
iseval = 0
