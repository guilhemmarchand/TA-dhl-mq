# savedsearches.conf

#
# Loggin shortcut access
#

[DHL MQ Logs - massbatch logs (singleline messages published in batches)]
description = This report provides logs from the managebatch command
dispatch.earliest_time = -60m
dispatch.latest_time = now
display.visualizations.show = 0
request.ui_dispatch_app = TA-dhl-mq
request.ui_dispatch_view = search
search = (`idx_mq`) sourcetype="mq:actions:mq_publish_message:relay" source="*/mq_publish_message_relay_massbatch.log"

[DHL MQ Logs - relay and multiline publishing logs (re-attempts of failed batches and multiline publishing)]
description = This report provides logs from MQ relay publishers
dispatch.earliest_time = -60m
dispatch.latest_time = now
display.visualizations.show = 0
request.ui_dispatch_app = TA-dhl-mq
request.ui_dispatch_view = search
search = (`idx_mq`) sourcetype="mq:actions:mq_publish_message:relay" source="*/mq_publish_message_relay_modalert.log"

[DHL MQ Logs - putmqrelay (submitting messages to the collection for publishing purposes)]
description = This report provides logs from the putmqrelay command
dispatch.earliest_time = -60m
dispatch.latest_time = now
display.visualizations.show = 0
request.ui_dispatch_app = TA-dhl-mq
request.ui_dispatch_view = search
search = (`idx_mq`) sourcetype="mq:actions:mq_publish_message:putmqrelay"

[DHL MQ Logs - managebatch logs (batch validation by approvers)]
description = This report provides logs from the managebatch command
dispatch.earliest_time = -60m
dispatch.latest_time = now
display.visualizations.show = 0
request.ui_dispatch_app = TA-dhl-mq
request.ui_dispatch_view = search
search = (`idx_mq`) sourcetype="mq:actions:mq_publish_message:managebatch"

#
# Modular alert: handles failed massbatches and multiline messages publication
#

[DHL MQ messages publishing - relay publishing]
action.mq_publish_message_relay = 1
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = key
alert.suppress.period = 10m
alert.track = 0
counttype = number of events
cron_schedule = */2 * * * *
description = This alert handles MQ publish messages for relay publishers
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = TA-dhl-mq
request.ui_dispatch_view = search
search = | getmqrelay | eval key=_key | table key, appname, region, manager, queue, message, multiline, no_max_retry, no_attempts, ctime, mtime, user, batch_uuid, validation_required, status, comment

#
# custom command: handles singleline messages to be published by batches
#

[DHL MQ messages publishing - batch relay publishing for singleline messages]
cron_schedule = */2 * * * *
description = This alert handles MQ publish messages for singleline batch for relay publishers
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
request.ui_dispatch_app = TA-dhl-mq
request.ui_dispatch_view = search
search = | getmqbatch

#
# custom command: maintenance routine check to clear out any unexpected remaining files on the filesystem in batch and massbatch within the app name space
#

[DHL MQ maintenance - clean any remaining files in massbatch and batch folders]
cron_schedule = 0 * * * *
description = This report is a maintenance task to avoid filling the file-system in case of unexpected behaviour
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
request.ui_dispatch_app = TA-dhl-mq
request.ui_dispatch_view = search
search = | cleanorphans

#
# custom command: purge record older than 48 hours in the local cache of the consumers
#

[DHL MQ maintenance - purge old records from the local cache of the consumers]
cron_schedule = 5 * * * *
description = This report is a maintenance task that clears the old records from the local cache of the consumers
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
request.ui_dispatch_app = TA-dhl-mq
request.ui_dispatch_view = search
search = | purgelocalcache max_age=172800

#
# custom command: consumers register to an HA group for high availability purposes
#

[DHL MQ HA group - send keepalive consumer]
cron_schedule = 1-56/5 * * * *
description = This report is designed to be executed by the consumers to register their HA group statuses
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
request.ui_dispatch_app = TA-dhl-mq
request.ui_dispatch_view = search
search = | sendkeepalive

#
# custom command: get a local cached copy of the ha groups
#

[DHL MQ HA group - get ha groups from remote storage]
cron_schedule = 3-58/5 * * * *
description = This report is designed to be run by the consumers, and used to maintain a local cache knowledge of the HA groups
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
request.ui_dispatch_app = TA-dhl-mq
request.ui_dispatch_view = search
search = | gethagroups | spath | fields - _time, _raw | outputlookup mq_publish_local_cache_ha_groups

#
# HA group manager election
#
# Note: this search can be safety disabled on Heavy Forwarders, if executed this has no effects

[DHL MQ HA group - manager group election]
cron_schedule = 2-57/5 * * * *
description = This report is designed to be executed by the search heads and perform the election of a manager by HA group
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
request.ui_dispatch_app = TA-dhl-mq
request.ui_dispatch_view = search
search = | inputlookup mq_publish_ha_consumers_keepalive | eval key=_key \
| eval consumer_state=if(now() - mtime >= 10 * 60, "timeout", "up") \
\
| collect `idx_mq` source="mqsubmission:hagroup:consumers_keepalive" \
\
| eval active_consumer_name=case(consumer_state=="up", consumer_name) \
\
| eventstats values(consumer_name) as ha_registered_consumers, count as ha_registered_consumers_no by ha_group_name \
| eventstats first(active_consumer_name) as candidate1, last(active_consumer_name) as candidate2 by ha_group_name \
\
| lookup mq_publish_ha_groups ha_group_name OUTPUT ha_group_elected_manager as current_ha_group_elected_manager \
| eventstats count as current_no_tasks by current_ha_group_elected_manager \
\
| join type=outer candidate1 [ | inputlookup mq_publish_ha_consumers_keepalive | eval key=_key \
| eval consumer_state=if(now() - mtime >= 10 * 60, "timeout", "up") | stats first(consumer_state) as candidate1_state by consumer_name | rename consumer_name as candidate1 ] \
\
| join type=outer candidate2 [ | inputlookup mq_publish_ha_consumers_keepalive | eval key=_key \
| eval consumer_state=if(now() - mtime >= 10 * 60, "timeout", "up") | stats first(consumer_state) as candidate2_state by consumer_name | rename consumer_name as candidate2 ] \
\
| eval ha_group_elected_manager=case( \
isnotnull(current_ha_group_elected_manager) AND current_ha_group_elected_manager==candidate1 AND candidate1_state=="up", candidate1, \
isnotnull(current_ha_group_elected_manager) AND current_ha_group_elected_manager==candidate2 AND candidate1_state=="up", candidate2, \
candidate1_state=="up", candidate1, \
candidate2_state=="up", candidate2 \
) \
| eval ha_group_elected_manager=if(isnull(ha_group_elected_manager) OR ha_group_elected_manager="", "none", ha_group_elected_manager) \
\
| table ha_group_elected_manager, * \
| stats first(ha_group_elected_manager) as ha_group_elected_manager, values(ha_registered_consumers) as ha_registered_consumers by ha_group_name \
| eval ha_group_election_mtime=now(), key=md5(ha_group_name) \
\
| eval ha_registered_consumers=mvjoin(ha_registered_consumers, ",") \
| fields key, ha_group_name, ha_group_elected_manager, ha_group_election_mtime, ha_registered_consumers \
\
| outputlookup append=t key_field=key mq_publish_ha_groups \
\
| collect `idx_mq` source="mqsubmission:hagroup:manager_election"

#
# Audit
#

[DHL MQ Audit - Batch validation history]
description = This report exposes the history of the MQ batch validation
dispatch.earliest_time = -60m
dispatch.latest_time = now
display.visualizations.show = 0
request.ui_dispatch_app = TA-dhl-mq
request.ui_dispatch_view = search
search = | inputlookup mq_publish_batch_history | sort - limit=0 ctime | eval ctime=strftime(ctime, "%c")

#
# Alerting
#

# The following alert purpose is to detect a failure in a batch processing
[DHL MQ messages publishing - batch failing detected]
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = batch_uuid
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
description = This alert monitors for a batch failing from being processed properly
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = TA-dhl-mq
request.ui_dispatch_view = search
search = | `get_table_batches` | where (status="temporary_failure" OR status="permanent_failure")

# The following alert purpose is to detect when a batch is pending from approval
[DHL MQ messages publishing - batch is pending from approval]
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = batch_uuid
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
description = This alert monitors for a batch pending from approval
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = TA-dhl-mq
request.ui_dispatch_view = search
search = | `get_table_batches` | where (status="pending" AND validation_required=1) | fields - last_error \
| eval approver_link="/en-GB/app/TA-dhl-mq/manage_batches?form.batch_uuid" . batch_uuid

# The following alert purpose is to detect when a consumer
[DHL MQ HA group - registered consumer is offline]
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = consumer_name
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
description = This alert monitors for a registered consumer going offline and not sending keep alive during the past 10 minutes
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = TA-dhl-mq
request.ui_dispatch_view = search
search = | inputlookup mq_publish_ha_consumers_keepalive \
| where now()-mtime>=(10*60) \
| eval duration_since_last=tostring(now()-mtime, "duration"), mtime=strftime(mtime, "%c") | fields ha_group_name, consumer_name, duration_since_last, mtime
